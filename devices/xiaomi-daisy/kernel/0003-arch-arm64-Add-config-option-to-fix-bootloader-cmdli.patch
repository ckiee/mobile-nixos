diff --git a/arch/arm64/Kconfig b/arch/arm64/Kconfig
index 9f1d8566b..35a2aa84c 100644
--- a/arch/arm64/Kconfig
+++ b/arch/arm64/Kconfig
@@ -1846,6 +1846,23 @@ config CMDLINE
 	  entering them here. As a minimum, you should specify the the
 	  root device (e.g. root=/dev/nfs).
 
+config CMDLINE_DROP_DANGEROUS_ANDROID_OPTIONS
+       bool "Drop certain dangerous options from cmdline"
+       default n
+       help
+         Android bootloader passes some arguments in kernel command
+         line, that make booting custom OSes harder:
+
+           * skip_initramfs
+           * root=PARTUUID=...
+           * init=/init
+
+         Those parameters override default boot partition to hardcoded,
+         set init binary to /init, disable booting from initramfs.
+
+         If enabled, those parameters will be erased from bootloader's
+         command line, and custom OS can boot the way it likes.
+
 choice
 	prompt "Kernel command line type" if CMDLINE != ""
 	default CMDLINE_FROM_BOOTLOADER
@@ -1867,7 +1884,6 @@ config CMDLINE_FORCE
 	  loader passes other arguments to the kernel.
 	  This is useful if you cannot or don't want to change the
 	  command-line options your boot loader passes to the kernel.
-
 endchoice
 
 config EFI_STUB
diff --git a/drivers/of/fdt.c b/drivers/of/fdt.c
index ba17a80b8..e9b660ff7 100644
--- a/drivers/of/fdt.c
+++ b/drivers/of/fdt.c
@@ -1083,6 +1083,21 @@ int __init early_init_dt_scan_chosen(unsigned long node, const char *uname,
 
 	pr_debug("Command line is: %s\n", (char *)data);
 
+#ifdef CONFIG_CMDLINE_DROP_DANGEROUS_ANDROID_OPTIONS
+	pr_err("Replacing dangerous cmdline options...");
+	char *cmdline;
+	cmdline = strstr((const char *)data, "skip_initramfs");
+	if (cmdline)
+			*cmdline = '_';
+	cmdline = strstr((const char *)data, "root=");
+	if (cmdline)
+			*cmdline = '_';
+	cmdline = strstr((const char *)data, "init=");
+	if (cmdline)
+			*cmdline = '_';
+	pr_err("Command line now is: %s\n", (char*)data);
+#endif
+
 	rng_seed = of_get_flat_dt_prop(node, "rng-seed", &l);
 	if (rng_seed && l > 0) {
 		add_bootloader_randomness(rng_seed, l);
